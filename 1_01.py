import csv
import json

import joblib
import pandas as pd
import datetime

import dash
from dash import dcc, html, Input, Output, State, ALL
import dash_bootstrap_components as dbc

from transformers import AutoTokenizer, AutoModel
from dash.exceptions import PreventUpdate

from classifier import CustomEmbedder
from question_similarity_finder import QuestionSimilarityFinderTfidf
from utils.utils import is_personal_request, has_personal_verbs, anonymization

app = dash.Dash(__name__, suppress_callback_exceptions=True, external_stylesheets=[dbc.themes.BOOTSTRAP])
server = app.server

alfa_base = pd.read_excel('./data/alfa_base.xlsx', engine='openpyxl')
with open('./data/personal_answers.json', 'r', encoding='utf-8') as f:
    personal_answers_base = json.load(f)

model_path = "./models/paraphrase-multilingual-MiniLM-L12-v2"
tokenizer = AutoTokenizer.from_pretrained(model_path)
model = AutoModel.from_pretrained(model_path)

finder_tfidf = QuestionSimilarityFinderTfidf(model, tokenizer)
finder_tfidf.prepare_question_base(alfa_base)

loaded_tokenizer_path = "./models/logistic_regression"
loaded_model_path = "./models/logistic_regression"
loaded_clf_path = "./models/logistic_regression/logistic_regression_model.pkl"

embedder = CustomEmbedder(loaded_tokenizer_path)
clf = joblib.load(loaded_clf_path)


navbar = dbc.Navbar(
    dbc.Container([
        dbc.NavbarBrand("–°—É—Ñ–ª—ë—Ä Collection", href="/", className="fw-bold fs-4 custom-navbar-brand"),
        dbc.Nav([
            dbc.NavItem(dbc.NavLink("–û–ø–∏—Å–∞–Ω–∏–µ", href="/description", active="exact", className="custom-navlink")),
                 dbc.NavItem(dbc.NavLink("–ë–æ—Ç", href="/dashboard", active="exact", className="custom-navlink")),],
            className="ms-auto", navbar=True),
        dbc.NavItem(
            dbc.Button("–†–µ—Å—Ç–∞—Ä—Ç", color="danger", id="restart-btn", className="ms-3"), className="ms-2"),
        dcc.Location(id="url", refresh=True)
    ]),
    color="light", className="mb-4 shadow-sm border-bottom")

app.layout = html.Div(
        style={"color": "#00A69A", "minHeight": "100vh"},
        children=[
            dcc.Location(id='url', refresh=False), navbar,
            dbc.Container(id='page-content', className="animate__animated animate__fadeIn", fluid=True, class_name="px-4")
        ])


description_layout = dbc.Container([
    html.H2("üìò –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", className="mb-4", style={"color": "#00A69A"}),

    dbc.Row([
        dbc.Col([
            html.P(
                "–°–µ–π—á–∞—Å –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π:",
                style={"fontSize": "16px", "color": "#00A69A"}
            ),

            html.Ul([
                html.Li("üîç –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏.", style={"color": "#495867"}),
                html.Li("üë§ –ü–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ (–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞).", style={"color": "#495867"}),
            ], style={"fontSize": "15px"}),

            html.P(
                "–¶–µ–ª—å ‚Äî –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ–ø–æ–ª–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –≤—ã–¥–∞—Ç—å —Ö–æ—Ç—å –∫–∞–∫—É—é-—Ç–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É. –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ?",
                style={"fontSize": "16px", "marginTop": "1rem", "color": "#00A69A"}
            ),

            dbc.Row([
                dbc.Col([
                    html.Img(src="./assets/good_answer.png", style={"width": "100%", "borderRadius": "12px",
                                                                   "boxShadow": "0 4px 8px rgba(0,0,0,0.1)"}),
                    html.P("üôÇ –ù–∞–π–¥–µ–Ω–∞ –Ω—É–∂–Ω–∞—è —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.",
                           className="text-center", style={"marginTop": "0.5rem", "color": "#00A69A"})
                ], md=4),

                dbc.Col([
                    html.Img(src="./assets/good_personal_answer_bad_info.png", style={"width": "100%", "borderRadius": "12px",
                                                                                     "boxShadow": "0 4px 8px rgba(0,0,0,0.1)"}),
                    html.P("üë§ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–µ—Ç.",
                           className="text-center", style={"marginTop": "0.5rem", "color": "#00A69A"})
                ], md=4),

                dbc.Col([
                    html.Img(src="./assets/good_info_answer_bad_personal.png", style={"width": "100%", "borderRadius": "12px",
                                                                                     "boxShadow": "0 4px 8px rgba(0,0,0,0.1)"}),
                    html.P("üìö –ï—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –Ω–æ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å–ª—É—á–∞–π.",
                           className="text-center", style={"marginTop": "0.5rem", "color": "#00A69A"})
                ], md=4),
            ], className="my-4"),

            html.P("–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏:", style={"fontSize": "16px", "color": "#495867"}),
            html.Blockquote("¬´—Ö–æ—á—É –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç –æ–Ω–ª–∞–π–Ω¬ª", style={"fontStyle": "italic", "color": "#555"}),

            html.P(
                "–¢–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (—Ç–æ –µ—Å—Ç—å –∑–∞–¥–∞–Ω –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞), "
                "–Ω–æ –≤ –±–∞–∑–µ –ø–æ–∫–∞ –º–æ–∂–µ—Ç –Ω–µ –æ–∫–∞–∑–∞—Ç—å—Å—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ ‚Äî —Ç–æ–≥–¥–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ç—è –±—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è —á–∞—Å—Ç—å.",
                style={"fontSize": "16px", "color": "#495867"}
            ),

            html.P(
                "–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –¥–∞–∂–µ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö? –ö–∞–∫ –∏ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –∑–∞–¥–∞—á –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, "
                "–º—ã –Ω–µ –º–æ–∂–µ–º –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞. "
                "–ü–æ—ç—Ç–æ–º—É —Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî —ç—Ç–æ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.",
                style={"fontSize": "16px", "color": "#495867"}
            ),

            html.P(
                "‚úîÔ∏è –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π (–ø–æ–∏—Å–∫ –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è) —Å—Ä–∞–±–æ—Ç–∞–ª–∞ ‚Äî —ç—Ç–æ —É–∂–µ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! "
                "–ù–æ –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ—è, –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç ‚Äî —Å–º–µ–ª–æ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–¥–±—ç–∫ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.",
                style={"fontSize": "16px", "marginTop": "1rem", "color": "#495867"}
            ),

            html.P("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! ü§ù", style={"fontSize": "16px", "fontWeight": "bold", "marginTop": "1rem", "color": "#00A69A"}),

            # –ù–æ–≤—ã–π –±–ª–æ–∫ –ø—Ä–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–¥–±—ç–∫–∞
            html.H3("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–¥–±—ç–∫–∞", style={"color": "#fe5f55", "marginTop": "2rem"}),
            html.P(
                "–í —Ñ–∏–¥–±—ç–∫–µ –≤–≤–æ–¥–∏—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –§–ò–û, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è "
                "–ø–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.",
                style={"fontSize": "15px", "color": "#6c757d"}
            ),
            html.P(
                "–ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã, –∏—Ö –º–æ–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ –Ω–∞ –ø–æ—á—Ç—É –ü–û–ß–¢–ê –∏ –≤ —Å–∫–∞–π–ø/teams.",
                style={"fontSize": "15px", "color": "#6c757d"}
            ),
            html.P(
                "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –î–ª—è —ç—Ç–æ–≥–æ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                style={"fontSize": "15px", "color": "#6c757d", "fontStyle": "italic"}
            ),

            # –§—Ä–∞–∑–∞ –ø—Ä–æ —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
            html.P(
                "–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∂–º–∏—Ç–µ Restart.",
                style={"fontSize": "15px", "color": "#6c757d", "fontStyle": "italic"}
            ),
        ])
    ])
], className="animate__animated animate__fadeIn")


main_layout = dbc.Container([
        html.Div([
                dcc.Store(id="session-store", storage_type="session"),
                dbc.Row(
                    [
                        dbc.Col(
                            dbc.Card(
                                dbc.CardBody([
                                        html.H5("FEEDBACK", className="feedback-title"),
                                        dbc.Button("–û—Ç–≤–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π", id="satisfactory-answer-btn", size="sm", className="good-feedback-button"),
                                        html.Br(),
                                        html.H5("–ú–æ–¥–µ–ª—å –¥–∞–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç? - –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∏–¥–±–µ–∫", className="bad-feedback-label"),
                                        dbc.Label("–§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", className="feedback-label"),
                                        dbc.Input(id="input-operator-fio", placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", type="text", size="sm",
                                                  className="feedback-input"),
                                        dbc.Label("–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:", className="feedback-label"),
                                        dbc.Input(id="input-correct-answer", placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç", type="text", size="sm",
                                                  className="feedback-input"),
                                        dbc.Button("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å", id="submit-feedback-btn", size="sm", className="bad-feedback-button"),
                                    ]),className="shadow p-3 bg-light",), width=3,),
                        dbc.Col(
                            dbc.Card(
                                dbc.CardBody([
                                    html.H4("–ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π", className="knowledge-header"),
                                    html.Div([
                                        dbc.Label("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:", className="text-secondary small-label mb-1"),
                                        dbc.InputGroup([
                                            dbc.Input(id="input-text", placeholder="–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞...", type="text", size="sm", className="small-input"),
                                            dbc.Button("–í–≤–æ–¥", id="submit-btn", size="sm", className="inline-button")
                                        ], className="mb-3")
                                    ]),

                                    html.Div([
                                        html.H5("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", className="mb-2 small-label", style={"color": "#00A69A"}),
                                        html.Div([
                                            dbc.Checkbox(id="chk-fio", value=True, disabled=True, className="me-2"),
                                            dbc.Label("–§–ò–û:", html_for="input-fio", className="me-2 small-label"),
                                            dbc.Input(id="input-fio", type="text", placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û", size="sm", className="flex-grow-1 small-input")
                                        ], className="d-flex align-items-center mb-2"),

                                        html.Div([
                                            html.Div([
                                                dbc.Checkbox(id="chk-date", className="me-2"),
                                                dbc.Label("–î–∞—Ç–∞:", html_for="input-date", className="me-2 small-label"),
                                                dcc.DatePickerSingle(id="input-date", date=datetime.date.today(), display_format="DD.MM.YYYY",
                                                                     className="flex-grow-1")
                                            ], className="d-flex align-items-center me-3", style={"flex": "1"}),
                                            html.Div([
                                                dbc.Checkbox(id="chk-phone", className="me-2"),
                                                html.Span("‚òéÔ∏è", className="me-2 small-label"),
                                                dbc.Input(id="input-phone", type="tel", placeholder="+375 (__) ___-__-__", inputMode="tel",
                                                    pattern=r"^\+375\s\(\d{2}\)\s\d{3}-\d{2}-\d{2}$", size="sm",className="flex-grow-1 small-input"
                                                )
                                            ], className="d-flex align-items-center", style={"flex": "1"}),
                                        ], className="d-flex align-items-center mb-2"),

                                        html.Div([
                                            dbc.Checkbox(id="chk-amount", className="me-2"),
                                            dbc.Label("–°—É–º–º–∞:", html_for="input-amount", className="me-2 small-label"),
                                            dbc.Input(id="input-amount", type="number", placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É", size="sm",
                                                      className="flex-grow-1 me-2 small-input"),
                                            dbc.Select(id="select-currency",
                                                options=[
                                                    {"label": "BYN", "value": "BYN"},
                                                    {"label": "RUB", "value": "RUB"},
                                                    {"label": "USD", "value": "USD"},
                                                    {"label": "EUR", "value": "EUR"},
                                                    {"label": "CNY", "value": "CNY"}
                                                ], value="BYN",size="sm", className="currency-select")], className="d-flex align-items-center mb-3"),

                                        dbc.Button("–í–≤–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", id="submit-personal", size="sm", className="primary-button")
                                    ])]),
                                className="shadow p-3 bg-light"), width=5,),

                        dbc.Col(
                            dbc.Card(
                                dbc.CardBody([
                                    html.Div([
                                        html.H5("–í–æ–∑–º–æ–∂–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", className="mb-3 small personal-answers-title"),
                                        *[
                                            html.Div([
                                                html.P(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç {i}:", className="personal-answer-label"),
                                                html.Div(className="copy-wrapper",
                                                    children=[
                                                        dbc.Textarea(id=f"output-personal-{i}", value="", readOnly=True, className="mb-2 personal-answer-textarea"),
                                                        dbc.Button("üìã", id=f"copy-btn-personal-{i}",color="light", size="sm", className="copy-button")
                                                    ])]) for i in range(1, 4)]])]),
                                className="shadow p-3 bg-light",), width=4,),], className="mb-4"),

                dbc.Row([
                        dbc.Col(
                            dbc.Card(
                                dbc.CardBody([
                                        html.Div([
                                            dbc.Label("–í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç—É –∏–∑ –ë–ó:", className="small text-secondary label-text"),
                                            html.Div([
                                                html.P(id="label-text-1", className="mb-1 label-text"),
                                                html.Div(className="textarea-wrapper", children=[dbc.Textarea(id="output-text-1", value="", readOnly=True,
                                                                                                              className="personal-answer-textarea mb-2"),
                                                        dbc.Button("üìã", id="copy-btn-1", color="light", size="sm", className="copy-button")])]),
                                            html.Div([
                                                html.P(id="label-text-2", className="mb-1 label-text"),
                                                html.Div(className="textarea-wrapper", children=[dbc.Textarea(id="output-text-2", value="", readOnly=True,
                                                                                                              className="personal-answer-textarea mb-2"),
                                                        dbc.Button("üìã", id="copy-btn-2", color="light", size="sm", className="copy-button")])]),
                                            html.Div([
                                                html.P(id="label-text-3", className="mb-1 label-text"),
                                                html.Div(className="textarea-wrapper",children=[
                                                        dbc.Textarea(id="output-text-3", value="", readOnly=True, className="personal-answer-textarea mb-2"),
                                                        dbc.Button("üìã", id="copy-btn-3", color="light", size="sm", className="copy-button")
                                                    ])])], className="mb-4"),]),
                                className="card-container shadow p-3 bg-light"), width=12,),], className="mb-4"),],
            className="dashboard-container"
        ),

        dbc.Toast("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", id="copy-toast-1", header="", duration=2000, is_open=False, dismissable=False, className="copy-toast"),
        dbc.Toast("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", id="copy-toast-2", header="", duration=2000, is_open=False, dismissable=False, className="copy-toast"),
        dbc.Toast("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", id="copy-toast-3", header="", duration=2000, is_open=False, dismissable=False, className="copy-toast"),
        dbc.Toast("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", id="copy-toast-personal-1", header="", duration=2000, is_open=False, dismissable=False, className="copy-toast"),
        dbc.Toast("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", id="copy-toast-personal-2", header="", duration=2000, is_open=False, dismissable=False, className="copy-toast"),
        dbc.Toast("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", id="copy-toast-personal-3", header="", duration=2000, is_open=False, dismissable=False, className="copy-toast"),
    ]
)
samples = [
    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –í–∞—à–∏ –§–ò–û",
    "–í—ã–±–∏—Ä–∞–π—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏ - –±–∞–Ω–∫–∏ - –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –∏ –≤–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –≤—ã—à–µ",
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
    "–ü–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä –±–∞–Ω–∫–∞: 198 ‚Äì –ï–¥–∏–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏, +375 (29) 733-33-32 ‚Äì –ú–¢–°, +375 (44) 733-33-32 ‚Äì A1, +375 (25) 733-33-32 ‚Äì life:)",
    "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
    "–û—Ç–º–µ—Ç–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 30 –∏—é–Ω—è –∂–¥–µ–º –æ–ø–ª–∞—Ç—É, —Å—É–º–º—É –Ω–∞ –º–æ–º–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã —É—Ç–æ—á–Ω–∏—Ç–µ",
    "–†–ï–§–ò–ù–ê–°–ò–†–û–í–ê–ù–ò–ï - –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞. –¥–µ—Ç–∞–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É",
    "–û–ü–ò - –¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å —Ç—Ä–∞–Ω–∑–∏—Ç–Ω—ã–π —Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ, —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ –Ω–æ–º–µ—Ä—É +375445057773, –ª–∏–±–æ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Å—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç, –º–æ–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –∏ –û–ü–ò –Ω–µ —Å–ø–∏—à–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞",
    "–û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∞, –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞.",
    "–£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–µ –æ–ø–ª–∞—Ç—ã –ø–æ –∫—Ä–µ–¥–∏—Ç—É?",
    "–° —É—á–µ—Ç–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ä–æ–∫ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –Ω–µ –ø–æ–∑–¥–Ω–µ–µ‚Ä¶",
    "–£—Ç–æ—á–Ω–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å?",
    "–£—Ç–æ—á–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏? 11:25:24 –î–ü",
    "–°—Ä–æ–∫ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –Ω–µ –ø–æ–∑–¥–Ω–µ–µ.... –í —Å–ª—É—á–∞–µ –Ω–µ –æ–ø–ª–∞—Ç—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –≤–∑—ã—Å–∫–∞–Ω–∏—è, –æ–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É...."
]

gallery_layout = html.Div([
    html.H4("üéì –¢–∏–ø–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã", style={"margin": "20px 0"}),

    html.Div(
        [
            html.Div(
                sample,
                id={"type": "sample-text", "index": i},
                n_clicks=0,
                **{"data-text": sample},
                style={
                    "cursor": "pointer",
                    "padding": "10px",
                    "border": "1px solid #ccc",
                    "borderRadius": "5px",
                    "marginBottom": "10px",
                    "backgroundColor": "#f8f9fa"
                }
            )
            for i, sample in enumerate(samples)
        ],
        id="sample-gallery",
        style={
            "maxHeight": "80vh",
            "overflowY": "auto",
            "width": "400px",
            "padding": "10px",
            "border": "1px solid #ddd",
            "borderRadius": "8px",
        }
    ),

    html.Div(id="copy-helper", style={"display": "none"})
])

dashboard_layout = dbc.Container([
    dbc.Row([
        dbc.Col(main_layout, width=9),     # –Ω–∞–ø—Ä–∏–º–µ—Ä, 9/12 —à–∏—Ä–∏–Ω—ã
        dbc.Col(gallery_layout, width=3),  # 3/12 —à–∏—Ä–∏–Ω—ã
    ])
])


app.clientside_callback(
    """
    function(n_clicks_list) {
        const triggered = dash_clientside.callback_context.triggered;
        if (!triggered.length) return window.dash_clientside.no_update;

        const id = triggered[0].prop_id.split(".")[0];
        const element = document.getElementById(id);
        if (!element) return window.dash_clientside.no_update;

        const text = element.getAttribute("data-text");
        if (!text) return window.dash_clientside.no_update;

        // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ textarea
        const textarea = document.createElement("textarea");
        textarea.value = text;
        document.body.appendChild(textarea);
        textarea.select();
        document.execCommand("copy");
        document.body.removeChild(textarea);

        return "";
    }
    """,
    Output("copy-helper", "children"),
    Input({"type": "sample-text", "index": ALL}, "n_clicks"),
    prevent_initial_call=True
)

app.clientside_callback(
    """
    function(n_clicks) {
        if (!n_clicks) return window.dash_clientside.no_update;
        const textArea = document.getElementById('output-text-1');
        if (textArea) {
            textArea.select();
            document.execCommand('copy');
        }
        return true;
    }
    """,
    Output("copy-toast-1", "is_open"),
    Input("copy-btn-1", "n_clicks")
)

app.clientside_callback(
    """
    function(n_clicks) {
        if (!n_clicks) return window.dash_clientside.no_update;
        const textArea = document.getElementById('output-text-2');
        if (textArea) {
            textArea.select();
            document.execCommand('copy');
        }
        return true;
    }
    """,
    Output("copy-toast-2", "is_open"),
    Input("copy-btn-2", "n_clicks")
)

app.clientside_callback(
    """
    function(n_clicks) {
        if (!n_clicks) return window.dash_clientside.no_update;
        const textArea = document.getElementById('output-text-3');
        if (textArea) {
            textArea.select();
            document.execCommand('copy');
        }
        return true;
    }
    """,
    Output("copy-toast-3", "is_open"),
    Input("copy-btn-3", "n_clicks")
)

app.clientside_callback(
    """
    function(n_clicks) {
        if (!n_clicks) return window.dash_clientside.no_update;
        const textArea = document.getElementById('output-personal-1');
        if (textArea) {
            textArea.select();
            document.execCommand('copy');
        }
        return true;
    }
    """,
    Output("copy-toast-personal-1", "is_open"),
    Input("copy-btn-personal-1", "n_clicks")
)

app.clientside_callback(
    """
    function(n_clicks) {
        if (!n_clicks) return window.dash_clientside.no_update;
        const textArea = document.getElementById('output-personal-2');
        if (textArea) {
            textArea.select();
            document.execCommand('copy');
        }
        return true;
    }
    """,
    Output("copy-toast-personal-2", "is_open"),
    Input("copy-btn-personal-2", "n_clicks")
)

app.clientside_callback(
    """
    function(n_clicks) {
        if (!n_clicks) return window.dash_clientside.no_update;
        const textArea = document.getElementById('output-personal-3');
        if (textArea) {
            textArea.select();
            document.execCommand('copy');
        }
        return true;
    }
    """,
    Output("copy-toast-personal-3", "is_open"),
    Input("copy-btn-personal-3", "n_clicks")
)

@app.callback(
    Output("url", "pathname"),
    Input("restart-btn", "n_clicks"),
    prevent_initial_call=True
)
def restart_page(n_clicks):
    return "/dashboard"


def preprocess_custom_request(request):
    is_personal = has_personal_verbs(request)
    search_base_knowledge = finder_tfidf.get_top_similar(request)
    question1, question2, question3 = search_base_knowledge['–≤–æ–ø—Ä–æ—Å'].values.tolist()[:3]
    answer1, answer2, answer3 = search_base_knowledge['–æ—Ç–≤–µ—Ç'].values.tolist()[:3]
    return is_personal, answer1, answer2, answer3, question1, question2, question3


@app.callback(
    [
        Output("output-text-1", "value"),
        Output("output-text-2", "value"),
        Output("output-text-3", "value"),
        Output("label-text-1", "children"),
        Output("label-text-2", "children"),
        Output("label-text-3", "children"),
        Output("session-store", "data")# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
    ],
    Input("submit-btn", "n_clicks"),
    State("input-text", "value"),
    prevent_initial_call=True
)
def update_output(n_clicks, user_input):
    default_outputs = ("", "", "", "", "", "", {})

    if not user_input:
        return default_outputs

    is_personal, answer1, answer2, answer3, question1, question2, question3 = preprocess_custom_request(user_input)

    if not is_personal:
        is_personal = is_personal_request(user_input)

    session_data = {"is_personal": is_personal}

    return answer1, answer2, answer3, question1, question2, question3, session_data


def generate_greeting():
    current_hour = datetime.datetime.now().hour

    if 5 <= current_hour < 12:
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!"
    elif 12 <= current_hour < 18:
        return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!"
    elif 18 <= current_hour < 23:
        return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!"
    else:
        return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"


def fill_tags(template, tags):
    for key, value in tags.items():
        template = template.replace(f"[{key}]", value)
    return template



@app.callback(
    Output("output-personal-1", "value"),
    Output("output-personal-2", "value"),
    Output("output-personal-3", "value"),
    Input("submit-personal", "n_clicks"),
    State("input-fio", "value"),
    State("input-date", "date"),
    State("input-amount", "value"),
    State("select-currency", "value"),
    State("input-phone", "value"),
    State("chk-phone", "value"),
    State("input-text", "value"),
    State("session-store", "data"),
    prevent_initial_call=True
)
def handle_personal_submit(n_clicks, fio, date, amount, currency, phone, chk_phone, user_question, session_data):
    is_personal = session_data.get("is_personal") if session_data else False
    if not is_personal or not user_question:
        return "", "", ""

    tags = {"HELLO": generate_greeting(), "FIO": fio if fio else "[FIO]",
        "–î–ê–¢–ê": "[–î–ê–¢–ê]", "–°–£–ú–ú–ê": "[–°–£–ú–ú–ê]", "TELSP": "[TELSP]"}

    if date:
        try:
            date_obj = datetime.datetime.strptime(date, "%Y-%m-%d")
            tags["–î–ê–¢–ê"] = date_obj.strftime('%d-%m-%Y')
        except Exception:
            pass

    if amount:
        tags["–°–£–ú–ú–ê"] = f"{amount} {currency}" if currency else f"{amount}"

    if chk_phone and phone:
        tags["TELSP"] = phone
    else:
        tags["TELSP"] = session_data.get("telsp", "[TELSP]") if session_data else "[TELSP]"

    embeddings = embedder.get_embeddings(user_question)
    predictions = clf.predict(embeddings)
    templates = personal_answers_base.get(predictions[0], {})

    results = []
    for template in list(templates.values())[:3]:
        filled = fill_tags(template, tags)
        results.append(filled)

    while len(results) < 3:
        results.append("")

    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {predictions[0]}, —Ç–µ–≥–∏: {tags}")
    return results[0], results[1], results[2]



@app.callback(
    Output('satisfactory-answer-btn', 'children'),
    Input('satisfactory-answer-btn', 'n_clicks'),
    State('input-text', 'value'),
    State('output-text-1', 'value'),
    State('output-text-2', 'value'),
    State('output-text-3', 'value'),
    prevent_initial_call=True
)
def handle_satisfactory_answer(n_clicks, question, ans1, ans2, ans3):
    if not n_clicks:
        raise PreventUpdate

    if not question or not ans1 or not ans2 or not ans3:
        raise PreventUpdate

    anonymized_question = anonymization(question)
    current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    row = [current_time, "", anonymized_question, True, ""]

    with open('./data/feedback_logs.csv', mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow(row)
    return "‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç"


@app.callback(
    Output('submit-feedback-btn', 'children'),
    Input('submit-feedback-btn', 'n_clicks'),
    State('input-operator-fio', 'value'),
    State('input-correct-answer', 'value'),
    State('input-text', 'value'),
    State('output-text-1', 'value'),
    State('output-text-2', 'value'),
    State('output-text-3', 'value'),
    prevent_initial_call=True
)
def handle_feedback(n_clicks, operator_fio, correct_answer, question, ans1, ans2, ans3):
    if not n_clicks:
        raise PreventUpdate

    if not question or not ans1 or not ans2 or not ans3:
        raise PreventUpdate

    if operator_fio and correct_answer:
        anonymized_question = anonymization(question)
        current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        row = [current_time, operator_fio, anonymized_question, False, correct_answer]

        with open('./data/feedback_logs.csv', mode='a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(row)

        return "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    else:
        return "‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"



@app.callback(Output('page-content', 'children'),
              Input('url', 'pathname'))
def display_page(pathname):
    if pathname == '/dashboard':
        return dashboard_layout
    elif pathname == '/description':
        return description_layout
    return description_layout


if __name__ == '__main__':
    app.run(debug=True)
